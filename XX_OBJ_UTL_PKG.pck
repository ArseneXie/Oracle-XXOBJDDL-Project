CREATE OR REPLACE PACKAGE XX_OBJ_UTL_PKG IS
	/**
  *Common Program Info and Control
  *@author <a href="mailto:arsene@readycom.com.tw">Arsene</a>
  *@version 1.0, 2013/08/06 
  *@hist 1.0, 2013/08/06, Arsene, Release
  */

	C_NOLOG   CONSTANT NUMBER := 0;
	C_ERROR   CONSTANT NUMBER := 1;
	C_WARNING CONSTANT NUMBER := 2;
	C_LOG     CONSTANT NUMBER := 3;
	Z_DEBUG_LEVEL NUMBER := 2;  --default debug level

	Z_DBMSOUT_ON BOOLEAN := FALSE;
	Z_FLOGOUT_ON BOOLEAN := FALSE;
	Z_FOUTOUT_ON BOOLEAN := FALSE;
	Z_FILEOUT_ON BOOLEAN := FALSE;
	Z_UTL_FILE   UTL_FILE.FILE_TYPE;

	FUNCTION GET_PKG_VERSION(P_PACKAGE IN VARCHAR2,
													 P_TYPE    IN VARCHAR2) RETURN VARCHAR2;

	PROCEDURE SET_DEBUG_INIT(P_DEBUG_LEVEL IN NUMBER);

	PROCEDURE SET_DEBUG_INIT;

	PROCEDURE SET_LOG_OFF;

	PROCEDURE SET_DBMSOUT_ON(P_ENABLE IN BOOLEAN DEFAULT TRUE);

	PROCEDURE SET_FLOGOUT_ON(P_ENABLE IN BOOLEAN DEFAULT TRUE);

	PROCEDURE SET_FOUTOUT_ON(P_ENABLE IN BOOLEAN DEFAULT TRUE);

	PROCEDURE SET_FILEOUT_ON(P_ENABLE   IN BOOLEAN DEFAULT TRUE,
													 P_UTL_FILE IN UTL_FILE.FILE_TYPE DEFAULT NULL);

	PROCEDURE LOG(P_MSG_TYPE IN NUMBER,
								P_MESSAGE  IN VARCHAR2);

	FUNCTION GET_PKG_SUBPROG(P_PROGRAM_NAME IN VARCHAR2,
													 P_LINE         IN NUMBER) RETURN VARCHAR2;

	PROCEDURE LOG_EXP_ERROR(P_PROG_UNIT      IN VARCHAR2,
													P_EXP_LINE       IN NUMBER,
													P_ADD_MSG        IN VARCHAR2 DEFAULT '',
													P_SQLERRM_FLAG   IN VARCHAR2 DEFAULT 'Y',
													P_SQLERRM_MSG    IN VARCHAR2 DEFAULT '',
													P_BACKTRACE_FLAG IN VARCHAR2 DEFAULT 'Y');

END XX_OBJ_UTL_PKG;
/
CREATE OR REPLACE PACKAGE BODY XX_OBJ_UTL_PKG IS
	/**
  * get package version information
  * @param V_PACKAGE VARCHAR2 Pacakge Name
  * @param V_TYPE VARCHAR2 return type, C,D,else:
  *        C for version code,
  *        D for version date,
  *        else for @version comment
  * @return VARCHAR2 version information
  */
	FUNCTION GET_PKG_VERSION(P_PACKAGE IN VARCHAR2,
													 P_TYPE    IN VARCHAR2) RETURN VARCHAR2 IS
		V_STR    VARCHAR2(100);
		V_POS    NUMBER;
		V_RETURN VARCHAR2(100);
	BEGIN
		SELECT VER_STR, INSTR(VER_STR, ',')
			INTO V_STR, V_POS
			FROM (SELECT TRIM(REPLACE(UPPER((TEXT)), '*@VERSION', '')) VER_STR
							FROM ALL_SOURCE
						 WHERE NAME = UPPER(P_PACKAGE)
							 AND TYPE = 'PACKAGE'
							 AND UPPER(LTRIM(TEXT)) LIKE ('*@VERSION%'));
	
		IF P_TYPE = 'C' THEN
			V_RETURN := TRIM(SUBSTR(V_STR, 1, V_POS - 1));
		ELSIF P_TYPE = 'D' THEN
			V_RETURN := TRIM(SUBSTR(V_STR, V_POS + 1));
		ELSE
			V_RETURN := V_STR;
		END IF;
		RETURN V_RETURN;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 'NOT DEFINED' || SQLERRM;
	END GET_PKG_VERSION;

	/**
  * set debug level at specific level, set Z_DEBUG_LEVEL as P_DEBUG_LEVEL
  * @param P_DEBUG_LEVEL NUMBER debug level C_NOLOG,C_ERROR,C_WARNING,C_LOG
  */
	PROCEDURE SET_DEBUG_INIT(P_DEBUG_LEVEL IN NUMBER) IS
	
	BEGIN
		Z_DEBUG_LEVEL := P_DEBUG_LEVEL;
	END SET_DEBUG_INIT;

	/**
  * set debug level at warning level, set Z_DEBUG_LEVEL as C_WARNING for only display warning/error message
  */
	PROCEDURE SET_DEBUG_INIT IS
	BEGIN
		Z_DEBUG_LEVEL := C_WARNING;
	END SET_DEBUG_INIT;

	/**
  * set all log output enable be FALSE, for Z_DBMSOUT_ON,Z_FLOGOUT_ON,Z_FOUTOUT_ON,Z_FILEOUT_ON
  */
	PROCEDURE SET_LOG_OFF IS
	BEGIN
		Z_DBMSOUT_ON := FALSE;
		Z_FLOGOUT_ON := FALSE;
		Z_FOUTOUT_ON := FALSE;
		Z_FILEOUT_ON := FALSE;
	END SET_LOG_OFF;

	/**
  * set Z_DBMSOUT_ON be P_ENABLE
  * @param P_ENABLE BOOLEAN TRUE for enabled DBMS_OUTPUT, FLASE for disable ,default is TRUE
  */
	PROCEDURE SET_DBMSOUT_ON(P_ENABLE IN BOOLEAN DEFAULT TRUE) IS
	BEGIN
		Z_DBMSOUT_ON := P_ENABLE;
	END SET_DBMSOUT_ON;

	/**
  * set Z_FLOGOUT_ON be P_ENABLE
  * @param P_ENABLE BOOLEAN TRUE for enabled FND_FILE.LOG, FLASE for disable ,default is TRUE
  */
	PROCEDURE SET_FLOGOUT_ON(P_ENABLE IN BOOLEAN DEFAULT TRUE) IS
	BEGIN
		Z_FLOGOUT_ON := P_ENABLE;
	END SET_FLOGOUT_ON;

	/**
  * set Z_FOUTOUT_ON be P_ENABLE
  * @param P_ENABLE BOOLEAN TRUE for enabled FND_FILE.OUTPUT, FLASE for disable ,default is TRUE
  */
	PROCEDURE SET_FOUTOUT_ON(P_ENABLE IN BOOLEAN DEFAULT TRUE) IS
	BEGIN
		Z_FOUTOUT_ON := P_ENABLE;
	END SET_FOUTOUT_ON;

	/**
  * set Z_DBMSOUT_ON be P_ENABLE
  * @param P_ENABLE BOOLEAN TRUE for enabled UTL_FILE, FLASE for disable ,default is TRUE
  * @param P_UTL_FILE UTL_FILE.FILE_TYPE the log file 
  */
	PROCEDURE SET_FILEOUT_ON(P_ENABLE   IN BOOLEAN DEFAULT TRUE,
													 P_UTL_FILE IN UTL_FILE.FILE_TYPE DEFAULT NULL) IS
	BEGIN
		Z_FILEOUT_ON := P_ENABLE;
		Z_UTL_FILE   := P_UTL_FILE;
	END SET_FILEOUT_ON;

	/**
  * display message as log type: message
  * @param P_MSG_TYPE NUMBER log level C_ERROR,C_WARNING,C_LOG
  * @param P_MESSAGE VARCHAR2 log message
  */
	PROCEDURE LOG(P_MSG_TYPE IN NUMBER,
								P_MESSAGE  IN VARCHAR2) IS
		V_CODE   VARCHAR2(10);
		V_OUTMSG VARCHAR2(4000);
	BEGIN
		CASE P_MSG_TYPE
			WHEN C_ERROR THEN
				V_CODE := 'ERROR: ';
			WHEN C_WARNING THEN
				V_CODE := 'WARNING: ';
			ELSE
				V_CODE := 'LOG: ';
		END CASE;
	
		V_OUTMSG := V_CODE || P_MESSAGE;
	
		IF P_MSG_TYPE <= Z_DEBUG_LEVEL THEN
			IF Z_DBMSOUT_ON THEN
				DBMS_OUTPUT.PUT_LINE(V_OUTMSG);
			END IF;
			IF Z_FLOGOUT_ON THEN
				FND_FILE.PUT_LINE(FND_FILE.LOG, V_OUTMSG);
			END IF;
			IF Z_FOUTOUT_ON THEN
				FND_FILE.PUT_LINE(FND_FILE.OUTPUT, V_OUTMSG);
			END IF;
			IF Z_FILEOUT_ON THEN
				UTL_FILE.PUT_LINE(Z_UTL_FILE, V_OUTMSG);
			END IF;
		END IF;
	END LOG;

	/**
  * given package name and program line, return the procedure/function name
  * @param P_PROGRAM_NAME VARCHAR2 program name
  * @param P_LINE NUMBER program source line
  * @return VARCHAR2
  */
	FUNCTION GET_PKG_SUBPROG(P_PROGRAM_NAME IN VARCHAR2,
													 P_LINE         IN NUMBER) RETURN VARCHAR2 IS
		V_RETURN VARCHAR2(100);
	BEGIN
		SELECT DECODE(POSITION,
									0,
									REPLACE(REPLACE(TEXT, ' IS', ''), ' AS', ''),
									SUBSTR(TEXT, 1, POSITION - 1)) PROG_NAME
			INTO V_RETURN
			FROM (SELECT LINE, TEXT, INSTR(TEXT, '(') POSITION
							FROM (SELECT LINE,
													 LTRIM(LTRIM(UPPER(LTRIM(TEXT)), 'PROCEDURE')) TEXT
											FROM ALL_SOURCE
										 WHERE NAME = P_PROGRAM_NAME
											 AND LINE <= P_LINE
											 AND TYPE = 'PACKAGE BODY'
											 AND LTRIM(TEXT) LIKE 'PROCEDURE%'
										UNION
										SELECT LINE,
													 LTRIM(LTRIM(UPPER(LTRIM(TEXT)), 'FUNCTION')) TEXT
											FROM ALL_SOURCE
										 WHERE NAME = P_PROGRAM_NAME
											 AND LINE <= P_LINE
											 AND TYPE = 'PACKAGE BODY'
											 AND UPPER(LTRIM(TEXT)) LIKE 'FUNCTION%'
										 ORDER BY LINE DESC)
						 WHERE ROWNUM = 1);
	
		RETURN P_PROGRAM_NAME || '.' || V_RETURN;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN P_PROGRAM_NAME;
	END GET_PKG_SUBPROG;

	/**
  * the common format exception log precedure, generate the exception message for error log
  * @param P_PROG_UNIT VARCHAR2 program name
  * @param P_EXP_LINE NUMBER program source line, where this procedure been called
  * @param P_ADD_MSG VARCHAR2 additional message displayed in exception, default is null
  * @param P_SQLERRM_FLAG VARCHAR2 display SQLERRM message or not default is Y
  * @param P_SQLERRM_MSG VARCHAR2 the SQLERRM Message 
  * @param P_BACKTRACE_FLAG VARCHAR2 display BACKTRACE message or not default is Y
  */
	PROCEDURE LOG_EXP_ERROR(P_PROG_UNIT      IN VARCHAR2,
													P_EXP_LINE       IN NUMBER,
													P_ADD_MSG        IN VARCHAR2 DEFAULT '',
													P_SQLERRM_FLAG   IN VARCHAR2 DEFAULT 'Y',
													P_SQLERRM_MSG    IN VARCHAR2 DEFAULT '',
													P_BACKTRACE_FLAG IN VARCHAR2 DEFAULT 'Y') IS
	
		V_ERROR_MSG VARCHAR2(1000);
	BEGIN
		V_ERROR_MSG := '@' || GET_PKG_SUBPROG(P_PROG_UNIT, P_EXP_LINE) || ', ' ||
									 P_ADD_MSG;
		XX_OBJ_UTL_PKG.LOG(XX_OBJ_UTL_PKG.C_ERROR, V_ERROR_MSG);
		IF P_SQLERRM_FLAG = 'Y' THEN
			XX_OBJ_UTL_PKG.LOG(XX_OBJ_UTL_PKG.C_ERROR,
												 'SQLERRM:' || P_SQLERRM_MSG);
		END IF;
	
		IF P_BACKTRACE_FLAG = 'Y' THEN
			XX_OBJ_UTL_PKG.LOG(XX_OBJ_UTL_PKG.C_ERROR,
												 DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
		END IF;
	END LOG_EXP_ERROR;

END XX_OBJ_UTL_PKG;

 
/
